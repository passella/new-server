name: Build and Publish Docker Image

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Upgraded from read to write for creating releases
      packages: write

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build with Gradle
        run: ./gradlew build

      - name: Extract version from build
        id: extract_version
        run: |
          VERSION=$(unzip -p build/libs/*.jar META-INF/MANIFEST.MF | grep "Implementation-Version" | cut -d' ' -f2 | tr -d '\r')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,format=short
            type=ref,event=branch
            latest
            ${{ env.VERSION }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Extract Docker image digest for the release notes
      - name: Extract Docker image digest
        id: image_digest
        run: |
          DIGEST=$(docker inspect ghcr.io/${{ github.repository }}:${{ env.VERSION }} --format='{{index .RepoDigests 0}}' | cut -d'@' -f2)
          echo "DIGEST=$DIGEST" >> $GITHUB_ENV
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

      # Create GitHub Release
      - name: Create GitHub Release
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        id: create_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if release already exists
          if ! gh release view v${{ env.VERSION }} &>/dev/null; then
            # Get commit history since last tag for release notes
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -z "$PREVIOUS_TAG" ]; then
              COMMIT_LOG=$(git log --pretty=format:"* %s (%h)" -10)
            else
              COMMIT_LOG=$(git log --pretty=format:"* %s (%h)" $PREVIOUS_TAG..HEAD)
            fi
          
            # Create release notes with Docker image information
            cat > release_notes.md << EOF
          # Release v${{ env.VERSION }}
          
          ## Docker Image
          
          ```
          ghcr.io/${{ github.repository }}:${{ env.VERSION }}
          ghcr.io/${{ github.repository }}:latest
          ```
          
          Image Digest: \`${{ env.DIGEST }}\`
          
          ## What's Changed
          
          $COMMIT_LOG
          
          ## Installation
          
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ env.VERSION }}
          ```
          
          ## Running the Container
          
          ```bash
          docker run -p 8080:8080 ghcr.io/${{ github.repository }}:${{ env.VERSION }}
          ```
          EOF
          
            # Create the release
            gh release create v${{ env.VERSION }} \
              --title "Release v${{ env.VERSION }}" \
              --notes-file release_notes.md \
              --target ${{ github.sha }} \
              build/libs/*.jar
          
            echo "Created release v${{ env.VERSION }}"
          else
            echo "Release v${{ env.VERSION }} already exists, skipping release creation"
          fi

      - name: Display Docker Image URL
        run: |
          echo "::notice::Docker image published to: ghcr.io/${{ github.repository }}:sha-${{ github.sha }}"
          echo "::notice::Docker image published to: ghcr.io/${{ github.repository }}:${{ env.VERSION }}"
          echo "::notice::Docker image published to: ghcr.io/${{ github.repository }}:latest"
