name: Build and Publish Docker Image

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build with Gradle
        run: ./gradlew build

      - name: Extract version from build
        id: extract_version
        run: |
          VERSION=$(unzip -p build/libs/*.jar META-INF/MANIFEST.MF | grep "Implementation-Version" | cut -d' ' -f2 | tr -d '\r')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,format=short
            type=ref,event=branch
            latest
            ${{ env.VERSION }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Display Docker Image URL
        run: |
          echo "::notice::Docker image published to: ghcr.io/${{ github.repository }}:sha-${{ github.sha }}"
          echo "::notice::Docker image published to: ghcr.io/${{ github.repository }}:${{ env.VERSION }}"
          echo "::notice::Docker image published to: ghcr.io/${{ github.repository }}:latest"

      - name: Cleanup old Docker images
        if: github.event_name == 'push'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO_OWNER=$(echo "${{ github.repository }}" | cut -d'/' -f1)
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          PACKAGE_URL="https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/packages/container/$REPO_NAME/versions"
          VERSIONS=$(curl -s -H "Authorization: Bearer $GH_TOKEN" "$PACKAGE_URL")
          TOTAL=$(echo "$VERSIONS" | jq length)
          echo "Found $TOTAL versions for the image."
          if [ $TOTAL -gt 5 ]; then
            DELETE_COUNT=$((TOTAL - 5))
            echo "Deleting $DELETE_COUNT oldest versions to keep only the latest 5."
            OLDEST_VERSIONS=$(echo "$VERSIONS" | jq -r '.[] | [.id, .created_at] | @tsv' | sort -k2,2 | head -n $DELETE_COUNT | cut -f1)
            for VERSION_ID in $OLDEST_VERSIONS; do
              DELETE_URL="$PACKAGE_URL/$VERSION_ID"
              curl -s -X DELETE -H "Authorization: Bearer $GH_TOKEN" "$DELETE_URL"
              echo "Deleted version ID $VERSION_ID."
            done
          else
            echo "No cleanup needed. Only $TOTAL versions exist (less than or equal to 5)."
          fi